Index: src/com/seregsagapitov/start/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.seregsagapitov.start;\r\n\r\nimport com.seregsagapitov.DB.ConnectDB;\r\nimport com.seregsagapitov.controllers.Controller;\r\nimport com.seregsagapitov.controllers.LoginController;\r\nimport com.seregsagapitov.objects.Language;\r\nimport com.seregsagapitov.utils.LocaleManager;\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport sun.security.util.Password;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Locale;\r\nimport java.util.Observable;\r\nimport java.util.Observer;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Main extends Application implements Observer {\r\n\r\n\r\n    private static final String FXML_MAIN = \"../fxml/main.fxml\";\r\n    private static final String BUNDLES_FOLDER = \"com.seregsagapitov.bundles.Locale\";\r\n    private Stage primaryStage;\r\n    private Parent fxmlMain;\r\n    private Controller controller;\r\n    private FXMLLoader fxmlLoader;\r\n\r\n    private AnchorPane currentRoot;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        this.primaryStage = primaryStage;\r\n        createGUI(LocaleManager.RU_LOCALE);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void update(Observable o, Object arg) {\r\n        Language language = (Language) arg;\r\n        AnchorPane newNode = loadFXML(language.getLocale()); // получить новое дерево компонентов  с нужной локалью\r\n        currentRoot.getChildren().setAll(newNode.getChildren()); // заменить старые дочерние компоненты на новые\r\n\r\n    }\r\n\r\n\r\n    // Загружаем дерево компонентов и возвращаем в виде AnchorPane (корневой элемент в FXML)\r\n    private AnchorPane loadFXML(Locale locale) {\r\n        fxmlLoader = new FXMLLoader();\r\n        fxmlLoader.setLocation(getClass().getResource(FXML_MAIN));\r\n        fxmlLoader.setResources(ResourceBundle.getBundle(BUNDLES_FOLDER, locale));\r\n\r\n        AnchorPane node = null;\r\n\r\n        try {\r\n            node = (AnchorPane) fxmlLoader.load();\r\n            controller = fxmlLoader.getController();\r\n            controller.addObserver(this);\r\n            primaryStage.setTitle(fxmlLoader.getResources().getString(\"NoteBook\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return node;\r\n    }\r\n\r\n    private void createGUI(Locale locale) {\r\n        currentRoot = loadFXML(locale);\r\n        Scene scene = new Scene(currentRoot, 300, 640);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setResizable(false);\r\n        primaryStage.show();\r\n    }\r\n\r\n\r\n    //    private Controller controller;\r\n//\r\n//    @Override\r\n//    public void start(Stage primaryStage) throws Exception {\r\n//        if (ConnectDB.selectPassword().equals(\"\")) {\r\n//            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/main.fxml\"));\r\n//          // loader.setResources(ResourceBundle.getBundle(\"../bundles/Locale_en.properties\", new Locale(\"ru\")));\r\n//            Parent root = loader.load();\r\n//           // controller.addObserver(this);\r\n//            //Parent root = FXMLLoader.load(getClass().getResource(\"../fxml/main.fxml\"));\r\n//            //primaryStage.initStyle(StageStyle.TRANSPARENT);\r\n//            //primaryStage.setTitle(loader.getResources().getString(\"NoteBook\"));\r\n//            primaryStage.setTitle(\"NoteBook\");\r\n//            primaryStage.setResizable(false);\r\n//            Scene scene = new Scene(root, 300, 640);\r\n//            //scene.setFill(Color.TRANSPARENT);\r\n//            primaryStage.setScene(scene);\r\n//            primaryStage.show();\r\n//        } else {\r\n//            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/Password.fxml\"));\r\n//            Parent root = loader.load();\r\n//\r\n//            primaryStage.setTitle(\"NoteMain\");\r\n//            primaryStage.setResizable(false);\r\n//            Scene scene = new Scene(root, 300, 100);\r\n//\r\n//\r\n//            primaryStage.setScene(scene);\r\n//            primaryStage.show();\r\n//\r\n//        }\r\n//    }\r\n//    public static void main(String[] args) {\r\n//        launch(args);\r\n//    }\r\n//\r\n//    @Override\r\n//    public void update(Observable o, Object arg) {\r\n//        Language language = (Language) arg;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/seregsagapitov/start/Main.java b/src/com/seregsagapitov/start/Main.java
--- a/src/com/seregsagapitov/start/Main.java	(revision bf49b85752b14a19718ed87c05e38463478bf2b2)
+++ b/src/com/seregsagapitov/start/Main.java	(date 1626230021577)
@@ -25,11 +25,20 @@
 public class Main extends Application implements Observer {
 
 
-    private static final String FXML_MAIN = "../fxml/main.fxml";
-    private static final String BUNDLES_FOLDER = "com.seregsagapitov.bundles.Locale";
-    private Stage primaryStage;
+    public static final String FXML_MAIN = "../fxml/main.fxml";
+    public static final String BUNDLES_FOLDER = "com.seregsagapitov.bundles.Locale";
+    private static Stage primaryStage;
     private Parent fxmlMain;
     private Controller controller;
+
+    public static Stage getPrimaryStage() {
+        return primaryStage;
+    }
+
+    public void setPrimaryStage(Stage primaryStage) {
+        this.primaryStage = primaryStage;
+    }
+
     private FXMLLoader fxmlLoader;
 
     private AnchorPane currentRoot;
Index: src/com/seregsagapitov/controllers/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.seregsagapitov.controllers;\r\n\r\nimport com.seregsagapitov.DB.ConnectDB;\r\nimport com.seregsagapitov.interfaces.impls.CollectionNote;\r\nimport com.seregsagapitov.objects.Language;\r\nimport com.seregsagapitov.objects.Note;\r\nimport com.seregsagapitov.start.Main;\r\nimport com.seregsagapitov.utils.LocaleManager;\r\nimport javafx.application.Platform;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ListChangeListener;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.transformation.FilteredList;\r\nimport javafx.collections.transformation.SortedList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.DirectoryChooser;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Window;\r\n\r\nimport java.awt.event.MouseEvent;\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.nio.file.*;\r\nimport java.nio.file.attribute.BasicFileAttributes;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.*;\r\nimport java.util.zip.*;\r\n\r\npublic class Controller extends Observable implements Initializable {\r\n\r\n    CollectionNote collectionNote = new CollectionNote();\r\n    private ListView<String> listViewSelectFolder;\r\n    @FXML\r\n    private Label labelPass;\r\n    @FXML\r\n    private AnchorPane PassPain;\r\n    @FXML\r\n    private PasswordField passField;\r\n    @FXML\r\n    private Button EnterMain;\r\n    Stage stage;\r\n    @FXML\r\n    private VBox VboxMain;\r\n    @FXML\r\n    private MenuButton menuButton;\r\n    @FXML\r\n    private Button searchButton;\r\n    @FXML\r\n    private Button newFolderButton;\r\n\r\n\r\n    @FXML\r\n    private ComboBox<Language> comboLocales;\r\n\r\n    @FXML\r\n    Button clearRecButton;\r\n\r\n    public TableView<Note> getTableNote() {\r\n        return tableNote;\r\n    }\r\n\r\n    TextArea textAreaFX;\r\n    @FXML\r\n    private TableView<Note> tableNote;\r\n    @FXML\r\n    private TableColumn<Note, String> columnNotes;\r\n    @FXML\r\n    Button delButton;\r\n    @FXML\r\n    Button addButton;\r\n    @FXML\r\n    private Button replaceButton;\r\n    @FXML\r\n    private MenuButton menuButton_folder;\r\n    @FXML\r\n    private AnchorPane MainAnchorPain;\r\n\r\n    @FXML\r\n    private MenuItem exportZipItem;\r\n\r\n    @FXML\r\n    private TextField filterField;\r\n\r\n    @FXML\r\n    private PasswordField setPass;\r\n    @FXML\r\n    private Label labelCount;\r\n    private Parent fxmlEdit;\r\n    private Parent fxmlNewFolder;\r\n    private Parent fxmlAdd;\r\n    private Parent fxmlColour;\r\n    private Parent fxmlSetting;\r\n    private Parent fxmlSetPass;\r\n    private FXMLLoader fxmlLoader1 = new FXMLLoader();\r\n    private FXMLLoader fxmlLoader2 = new FXMLLoader();\r\n    private FXMLLoader fxmlLoader3 = new FXMLLoader();\r\n    private FXMLLoader fxmlLoader4 = new FXMLLoader();\r\n    private FXMLLoader fxmlLoader5 = new FXMLLoader();\r\n    private FXMLLoader fxmlLoader6 = new FXMLLoader();\r\n    private Stage setPasswordStage;\r\n    private Stage choiceColourDialogStage;\r\n    private Stage settingsDialogStage;\r\n    private EditController editController;\r\n    private NewFolderController newFolderController;\r\n    private NewNoteController newNoteController;\r\n    public selectFolderController selectFolderController;\r\n    public LoginController loginController;\r\n    selectFolderReplaceController selectFolderReplaceController;\r\n    public static boolean replaceOn;\r\n    ResourceBundle resourceBundle;\r\n\r\n\r\n    public static TreeMap<String, String> dataTable = new TreeMap<>();\r\n    public static Integer count = 0;\r\n    public static String currentTable = \"\";\r\n    private static final String RU_CODE = \"ru\";\r\n    private static final String EN_CODE = \"en\";\r\n\r\n\r\n    static {\r\n        dataTable.put(\"NOTES\", \"Мои заметки\");\r\n        dataTable.put(\"RECYCLED\", \"Корзина\");\r\n        currentTable = \"NOTES\";\r\n        //dataTable.put(currentTable, \"пум-пурум\");\r\n    }\r\n\r\n    @FXML\r\n    private void initialize() throws SQLException, IOException {\r\n        System.out.println(ConnectDB.selectPassword());\r\n\r\n\r\n        if (currentTable == \"NOTES\" || currentTable == \"RECYCLED\") {\r\n            menuButton_folder.getItems().get(1).setDisable(true);\r\n        } else {\r\n            menuButton_folder.getItems().get(1).setDisable(false);\r\n        }\r\n        clearRecButton.setVisible(false);\r\n\r\n\r\n        tableNote.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\r\n        columnNotes.setCellValueFactory(new PropertyValueFactory<Note, String>(\"title\"));\r\n        columnNotes.setText(dataTable.get(currentTable));\r\n\r\n        collectionNote.getNoteList().addListener(new ListChangeListener<Note>() {\r\n            @Override\r\n            public void onChanged(Change<? extends Note> c) {\r\n                updateCountLabel();\r\n            }\r\n        });\r\n\r\n        collectionNote.fillTestData();\r\n\r\n        fillLangCombobox();\r\n\r\n        tableNote.setItems(collectionNote.getNoteList());\r\n        updateCountLabel();\r\n\r\n        fxmlLoader4.setLocation(getClass().getResource(\"../fxml/choiceColour.fxml\"));\r\n        fxmlLoader5.setLocation(getClass().getResource(\"../fxml/setts.fxml\"));\r\n        fxmlLoader6.setLocation(getClass().getResource(\"../fxml/setPassword.fxml\"));\r\n\r\n\r\n        //      try {\r\n//            fxmlEdit = fxmlLoader1.load();\r\n//            fxmlAdd = fxmlLoader2.load();\r\n        //      fxmlNewFolder = fxmlLoader3.load();\r\n//            fxmlColour = fxmlLoader4.load();\r\n//            fxmlSetting = fxmlLoader5.load();\r\n        fxmlSetPass = fxmlLoader6.load();\r\n//        } catch (IOException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n        ConnectDB.feelDataDB();\r\n\r\n\r\n        // Реализация строки поиска filterField\r\n        // FilteredList<Note> filteredList = new FilteredList<>(collectionNote.getNoteList(), b - > true);\r\n        FilteredList<Note> filteredData = new FilteredList<>(collectionNote.getNoteList(), p -> true);\r\n        // 2. Set the filter Predicate whenever the filter changes.\r\n        filterField.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            filteredData.setPredicate(Note -> {\r\n                // If filter text is empty, display all persons.\r\n                if (newValue == null || newValue.isEmpty()) {\r\n                    return true;\r\n                }\r\n                // Compare first name and last name field in your object with filter.\r\n                String lowerCaseFilter = newValue.toLowerCase();\r\n                if (String.valueOf(Note.getNoteText()).toLowerCase().contains(lowerCaseFilter)) {\r\n                    return true;\r\n                    // Filter matches Notetext.\r\n                } else if (String.valueOf(Note.getCurrentMoment()).toLowerCase().contains(lowerCaseFilter)) {\r\n                    return true; // Filter matches CurrentMoment.\r\n                }\r\n                return false; // Does not match.\r\n            });\r\n        });\r\n        // 3. Wrap the FilteredList in a SortedList.\r\n        SortedList<Note> sortedData = new SortedList<>(filteredData);\r\n        // 4. Bind the SortedList comparator to the TableView comparator.\r\n        sortedData.comparatorProperty().bind(tableNote.comparatorProperty());\r\n        // 5. Add sorted (and filtered) data to the table.\r\n        tableNote.setItems(sortedData);\r\n\r\n\r\n        Platform.runLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                for (MenuItem item : menuButton.getItems()) {\r\n                    item.setOnAction(new EventHandler<ActionEvent>() {\r\n                        @Override\r\n                        public void handle(ActionEvent event) {\r\n                            if (item.getText().equals(resourceBundle.getString(\"SelectFolder\"))) {\r\n                                selectFolderMenu(event);\r\n                            }\r\n\r\n                            if (item.getText().equals(resourceBundle.getString(\"Recycled\"))) {\r\n                                currentTable = \"RECYCLED\";\r\n                                try {\r\n                                    ConnectDB.showData(CollectionNote.noteList);\r\n                                } catch (SQLException throwables) {\r\n                                    throwables.printStackTrace();\r\n                                }\r\n                                columnNotes.setText(Controller.dataTable.get(Controller.currentTable));\r\n                                menuButton_folder.getItems().get(1).setDisable(true);\r\n\r\n                                delButton.setDisable(true);\r\n                                addButton.setDisable(true);\r\n                                clearRecButton.setVisible(true);\r\n\r\n\r\n                            }\r\n\r\n                            if (item.getText().equals(resourceBundle.getString(\"ExportZipFile\"))) {\r\n                                exportToZipFile(event);\r\n                            }\r\n\r\n                            if (item.getText().equals(\"Password\")) {\r\n                                if (setPasswordStage == null) {\r\n                                    setPasswordStage = new Stage();\r\n                                    setPasswordStage.setTitle(resourceBundle.getString(\"SetPassword\"));\r\n                                    setPasswordStage.setResizable(false);\r\n                                    setPasswordStage.setScene(new Scene(fxmlSetPass, 300, 150));\r\n                                    setPasswordStage.initModality(Modality.WINDOW_MODAL);\r\n                                    setPasswordStage.showAndWait();\r\n\r\n                                } else {\r\n                                    setPasswordStage.show();\r\n                                }\r\n                            }\r\n\r\n\r\n                            if (item.getText().equals(resourceBundle.getString(\"Exit\"))) {\r\n                                System.exit(0);\r\n                                System.out.println(\"Кнопка выход и надо выйти!!!\");\r\n                            } else {\r\n                                System.out.println(\"Не существует такой таблицы!!!\");\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        Platform.runLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                for (MenuItem item : menuButton_folder.getItems()) {\r\n                    item.setOnAction(new EventHandler<ActionEvent>() {\r\n                        @Override\r\n                        public void handle(ActionEvent event) {\r\n                            if (item.getText().equals(resourceBundle.getString(\"NewFolder\"))) {\r\n                                try {\r\n                                    Stage stage = new Stage();\r\n                                    FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/newFolderNote.fxml\"));\r\n                                    Parent root = loader.load();\r\n                                    newFolderController = loader.getController();\r\n                                    newFolderController.columnNotesNewFolder = columnNotes;\r\n                                    //newFolderController.menuButton = menuButton;\r\n                                    stage.setTitle(resourceBundle.getString(\"NewFolder\"));\r\n                                    stage.setScene(new Scene(root, 300, 150));\r\n                                    stage.initModality(Modality.APPLICATION_MODAL);\r\n                                    stage.showAndWait();\r\n                                } catch (IOException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n\r\n                            if (item.getText().equals(resourceBundle.getString(\"DelFolder\"))) {\r\n                                String ss = Controller.dataTable.get(Controller.currentTable);  // Видимый заголовок таблицы\r\n                                String s1 = currentTable;\r\n                                try {\r\n                                    ConnectDB.deleteItems(s1);\r\n                                } catch (SQLException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n\r\n                                dataTable.remove(s1);\r\n                                System.out.println(dataTable);\r\n\r\n                                currentTable = \"NOTES\";\r\n                                if (currentTable == \"NOTES\") {\r\n                                    menuButton_folder.getItems().get(1).setDisable(true);\r\n                                }\r\n                                try {\r\n                                    //ConnectDB.feelDataDB();\r\n                                    ConnectDB.showData(CollectionNote.noteList);\r\n                                } catch (SQLException throwables) {\r\n                                    throwables.printStackTrace();\r\n                                }\r\n                                columnNotes.setText(Controller.dataTable.get(Controller.currentTable));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        Platform.runLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // слушаем изменение языка\r\n                comboLocales.setOnAction(new EventHandler<ActionEvent>() {\r\n                    @Override\r\n                    public void handle(ActionEvent event) {\r\n                        Language selectedLang = (Language) comboLocales.getSelectionModel().getSelectedItem();\r\n                        LocaleManager.setCurrentLanguage(selectedLang);\r\n\r\n                        // уведомить всех слушателей, что произошла смена языка\r\n                        setChanged();\r\n                        notifyObservers(selectedLang);\r\n                        System.out.println(\"Изменение языка\");\r\n                        //fillLangCombobox();\r\n                    }\r\n                });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    // Открытие окна установки пароля на приложение\r\n    @FXML\r\n    void openSetPassWindow(ActionEvent event) {\r\n        Window parentWindow = ((Node) event.getSource()).getScene().getWindow();\r\n\r\n        if (setPasswordStage == null) {\r\n            setPasswordStage = new Stage();\r\n            setPasswordStage.setTitle(resourceBundle.getString(\"SetPassword\"));\r\n            setPasswordStage.setResizable(false);\r\n            setPasswordStage.setScene(new Scene(fxmlSetPass, 300, 150));\r\n            setPasswordStage.initModality(Modality.WINDOW_MODAL);\r\n            setPasswordStage.getScene().getStylesheets().add((Main.class.getResource(\"../css/example.css\")).toExternalForm());\r\n            setPasswordStage.initOwner(parentWindow);\r\n\r\n            setPasswordStage.showAndWait();\r\n        } else {\r\n            setPasswordStage.show();\r\n        }\r\n    }\r\n\r\n\r\n    // NOTES Мои заметки\r\n    @FXML\r\n    void addNote(ActionEvent event) {\r\n        Parent root = null;\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/newNote.fxml\"));\r\n            root = loader.load();\r\n            newNoteController = loader.getController();\r\n            //newNoteController.textAreaFX = textAreaFX;\r\n            Scene scene = new Scene(root);\r\n            ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);\r\n            //textAreaFX.requestFocus();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void openEditWindow() {\r\n        tableNote.setOnMouseClicked(event -> {\r\n            if (event.getClickCount() == 2) {\r\n                Parent root = null;\r\n\r\n                if (tableNote.getSelectionModel().getSelectedItem() != null) {\r\n                    try {\r\n                        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/editNote.fxml\"));\r\n                        root = loader.load();\r\n                        Scene scene = new Scene(root);\r\n                        ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);\r\n                        editController = loader.getController();\r\n\r\n\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    Note selectedItem = (Note) tableNote.getSelectionModel().getSelectedItem();\r\n                    editController.setNote(selectedItem);\r\n                    System.out.println(tableNote.getSelectionModel().getSelectedItem());\r\n                } else {\r\n                    Parent root1 = null;\r\n                    try {\r\n                        if (!currentTable.equals(\"RECYCLED\")) {\r\n                            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/newNote.fxml\"));\r\n                            root1 = loader.load();\r\n                            newNoteController = loader.getController();\r\n                            Scene scene = new Scene(root1);\r\n                            ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @FXML\r\n    void delNote(ActionEvent event) {\r\n        ObservableList<Note> selectedNotes = tableNote.getSelectionModel().getSelectedItems();\r\n        ArrayList<Note> rows = new ArrayList<>(selectedNotes);\r\n\r\n        collectionNote.delete(rows);\r\n//        for (Note row : rows) {\r\n//            collectionNote.delete(row);\r\n//\r\n//        }\r\n    }\r\n\r\n\r\n    public void updateCountLabel() {\r\n        labelCount.setText(resourceBundle.getString(\"Count\") +  \": \" + collectionNote.getNoteList().size());\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    @FXML\r\n    void replaceNote(ActionEvent event) {\r\n\r\n//        ObservableList<Note> selectedNotes = tableNote.getSelectionModel().getSelectedItems();\r\n//        ArrayList<Note> rows = new ArrayList<>(selectedNotes);\r\n        replaceOn = true;\r\n        selectFolderMenu(event);\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n    }\r\n\r\n    // Выбор активной папки\r\n    public void selectFolderMenu(ActionEvent actionEvent) {\r\n        try {\r\n            Stage stage = new Stage();\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/selectFolder.fxml\"));\r\n            Parent root = loader.load();\r\n            selectFolderController = loader.getController();\r\n            selectFolderController.columnNotesSelectFolder = columnNotes;\r\n            selectFolderController.menuButton_folder_1 = menuButton_folder;\r\n            selectFolderController.tableNote = tableNote;\r\n            selectFolderController.addButton = addButton;\r\n            selectFolderController.delButton = delButton;\r\n            selectFolderController.clearRecButton = clearRecButton;\r\n\r\n            for (Map.Entry<String, String> entry : dataTable.entrySet()) {\r\n                String value = String.valueOf(entry.getValue());\r\n                selectFolderController.getListViewSelectFolder().getItems().add(value);\r\n                //selectFolderController.getListViewSelectFolder().getItems().add();\r\n            }\r\n            stage.setTitle(resourceBundle.getString(\"SelectFolder\"));\r\n            stage.setScene(new Scene(root, 300, 300));\r\n            stage.initModality(Modality.APPLICATION_MODAL);\r\n            stage.showAndWait();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    // Заолнение таблицы данными\r\n    public void fillSelectList() {\r\n        selectFolderController = new selectFolderController();\r\n        for (Map.Entry<String, String> entry : dataTable.entrySet()) {\r\n            String value = String.valueOf(entry.getValue());\r\n            selectFolderController.getListViewSelectFolder().getItems().add(value);\r\n        }\r\n        // fillLangCombobox();\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n\r\n//    void passwordWindow() {\r\n//        try {\r\n//            Stage stage = new Stage();\r\n//            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"../fxml/Password.fxml\"));\r\n//            Parent root = loader.load();\r\n//\r\n//            stage.setTitle(\"NoteMain/Password\");\r\n//            stage.setScene(new Scene(root, 400, 200));\r\n//            stage.initModality(Modality.APPLICATION_MODAL);\r\n//            stage.showAndWait();\r\n//        } catch (IOException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//    }\r\n\r\n\r\n    // Сохранение данных приложения в Zip-файл\r\n\r\n    @FXML\r\n    private void exportToZipFile(ActionEvent event) {\r\n        DirectoryChooser directoryChooser = new DirectoryChooser();\r\n\r\n        directoryChooser.setTitle(\"Выбор папки для Zip-архива\");\r\n\r\n        File selectedDir = directoryChooser.showDialog(tableNote.getScene().getWindow());\r\n\r\n\r\n        Path pathRoot = Paths.get(\"Notebook\");\r\n        try {\r\n            Files.createDirectory(pathRoot);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        String notetext = \"\";\r\n        String currentMoment = \"\";\r\n        ObservableList<Note> noteList = FXCollections.observableArrayList();\r\n\r\n        ConnectDB.connect();\r\n        for (Map.Entry<String, String> entry : dataTable.entrySet()) {\r\n            Path path = Paths.get(pathRoot + \"/\" + dataTable.get(entry.getKey()));\r\n//            try {\r\n//                //Files.createDirectory(Paths.get(pathRoot + \"/\" + path));\r\n//            } catch (IOException e) {\r\n//                e.printStackTrace();\r\n//            }\r\n            System.out.println(\"Key: \" + entry.getKey() + \" Value: \" + entry.getValue());\r\n            try {\r\n                Statement stmt = ConnectDB.connection.createStatement();\r\n                String query = \"SELECT * FROM \" + entry.getKey() + \" ;\";\r\n                ResultSet rs = stmt.executeQuery(query);\r\n\r\n                while (rs.next()) {\r\n\r\n                    noteList.add(new Note(rs.getString(\"NOTETEXT\"), rs.getString(\"DATE\"), rs.getInt(\"ID\")));\r\n                }\r\n            } catch (SQLException throwables) {\r\n                throwables.printStackTrace();\r\n            }\r\n\r\n            String fileName1 = \"\";\r\n\r\n\r\n            try {\r\n                for (int i = 0; i < noteList.size(); i++) {\r\n\r\n                    try {\r\n                        Files.createDirectories(path);\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    if (noteList.get(i).getNoteText().length() > 7) {\r\n                        fileName1 = noteList.get(i).getNoteText().substring(0, 7) + \".txt\";\r\n                    } else {\r\n                        fileName1 = noteList.get(i).getNoteText() + \".txt\";\r\n                    }\r\n                    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(path + \"/\" + fileName1), 8192);\r\n                    bufferedWriter.write(noteList.get(i).getCurrentMoment() + \"\\n\" + noteList.get(i).getNoteText());\r\n                    bufferedWriter.close();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            noteList.clear();\r\n        }\r\n        ConnectDB.disconnect();\r\n        String zipFile = selectedDir + \"/\" + pathRoot + \".zip\";\r\n        try {\r\n            Zip(pathRoot.toString(), zipFile);\r\n\r\n            // Удаление созданного каталога\r\n            Files.walkFileTree(pathRoot, new SimpleFileVisitor<Path>() {\r\n                @Override\r\n                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\r\n                    Files.delete(file);\r\n                    return FileVisitResult.CONTINUE;\r\n                }\r\n\r\n                @Override\r\n                public FileVisitResult postVisitDirectory(Path dir, IOException exc)\r\n                        throws IOException {\r\n                    Files.delete(dir);\r\n                    return FileVisitResult.CONTINUE;\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        createAlertMessage(\"Создание Zip-архива\", \"Zip-архив \" + Paths.get(zipFile).getFileName() + \" успешно создан!\", \"Размер архива: \" + new File(zipFile).length() + \" байт\");\r\n\r\n\r\n    }\r\n\r\n    private void Zip(String source_dir, String zip_file) throws Exception {\r\n        // Cоздание объекта ZipOutputStream из FileOutputStream\r\n        FileOutputStream fout = new FileOutputStream(zip_file);\r\n        ZipOutputStream zout = new ZipOutputStream(fout);\r\n        zout.setLevel(Deflater.BEST_COMPRESSION);\r\n\r\n\r\n        // Создание объекта File object архивируемой директории\r\n        File fileSource = new File(source_dir);\r\n        addDirectory(zout, fileSource);\r\n        // Закрываем ZipOutputStream\r\n        zout.close();\r\n        System.out.println(\"Zip файл создан!\");\r\n    }\r\n\r\n    private void addDirectory(ZipOutputStream zout, File fileSource)\r\n            throws Exception {\r\n        File[] files = fileSource.listFiles();\r\n        System.out.println(\"Добавление директории <\" + fileSource.getName() + \">\");\r\n        for (int i = 0; i < files.length; i++) {\r\n            // Если file является директорией, то рекурсивно вызываем\r\n            // метод addDirectory\r\n            if (files[i].isDirectory()) {\r\n                addDirectory(zout, files[i]);\r\n                continue;\r\n            }\r\n            System.out.println(\"Добавление файла <\" + files[i].getName() + \">\");\r\n\r\n            FileInputStream fis = new FileInputStream(files[i]);\r\n\r\n            zout.putNextEntry(new ZipEntry(files[i].getPath()));\r\n\r\n            byte[] buffer = new byte[4048];\r\n            int length;\r\n            while ((length = fis.read(buffer)) > 0)\r\n                zout.write(buffer, 0, length);\r\n            // Закрываем ZipOutputStream и InputStream\r\n            zout.closeEntry();\r\n            fis.close();\r\n        }\r\n    }\r\n    // Создание информационного окна\r\n\r\n    void createAlertMessage(String title, String headerText, String contentText) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(headerText);\r\n        alert.setContentText(contentText);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    // Метод очистки корзины (безвозвратное удаление данных)\r\n    @FXML\r\n    void clearRecycled(ActionEvent event) {\r\n        int sizeRecycled = collectionNote.getNoteList().size();\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Корзина\");\r\n        alert.setHeaderText(\"Все файлы корзины будут удалены безвозвратно\");\r\n        alert.setContentText(\"Вы хотите очистить корзину?\");\r\n\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (result.get() == ButtonType.OK) {\r\n            ConnectDB.deleteFromRecycled();\r\n            try {\r\n                ConnectDB.showData(collectionNote.getNoteList());\r\n            } catch (SQLException throwables) {\r\n                throwables.printStackTrace();\r\n            }\r\n            createAlertMessage(\"Корзина очищена\", \"Корзина успешно очищена!\", \"Удалено \" + sizeRecycled + \" записей(сь)\");\r\n        } else {\r\n            alert.close();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void OnActionMenuButton_folder(ActionEvent event) {\r\n    }\r\n\r\n\r\n    @FXML\r\n    void choiseFolder(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void choiseColour(ActionEvent event) {\r\n    }\r\n\r\n    @FXML\r\n    void openSettingWindow(ActionEvent event) {\r\n\r\n    }\r\n\r\n    void openWindowCoiceColour(ActionEvent event) throws IOException {\r\n        if (choiceColourDialogStage == null) {\r\n            choiceColourDialogStage = new Stage();\r\n            choiceColourDialogStage.setTitle(\"Выбор цвета\");\r\n            choiceColourDialogStage.setResizable(false);\r\n            choiceColourDialogStage.setScene(new Scene(fxmlColour, 300, 150));\r\n            choiceColourDialogStage.initModality(Modality.WINDOW_MODAL);\r\n            choiceColourDialogStage.showAndWait();\r\n        } else {\r\n            choiceColourDialogStage.show();\r\n        }\r\n    }\r\n\r\n    void openWindowCoSetting(ActionEvent event) throws IOException {\r\n\r\n        if (settingsDialogStage == null) {\r\n            settingsDialogStage = new Stage();\r\n            settingsDialogStage.setTitle(\"Настройки\");\r\n            settingsDialogStage.setResizable(false);\r\n            settingsDialogStage.setScene(new Scene(fxmlSetting, 300, 250));\r\n            settingsDialogStage.initModality(Modality.WINDOW_MODAL);\r\n            settingsDialogStage.showAndWait();\r\n        } else {\r\n            settingsDialogStage.show();\r\n        }\r\n    }\r\n\r\n\r\n    @FXML\r\n    void OnActionMenuButton(ActionEvent event) {\r\n    }\r\n\r\n    void actionClose(ActionEvent event) {\r\n        Node sourse = (Node) event.getSource();\r\n        Stage stage = (Stage) sourse.getScene().getWindow();\r\n        stage.close();\r\n    }\r\n\r\n    private void fillLangCombobox() {\r\n        Language langRU = new Language(RU_CODE, resourceBundle.getString(\"ru\"), LocaleManager.RU_LOCALE, 0);\r\n        Language langEN = new Language(EN_CODE, resourceBundle.getString(\"en\"), LocaleManager.EN_LOCALE, 1);\r\n\r\n        comboLocales.getItems().add(langRU);\r\n        comboLocales.getItems().add(langEN);\r\n\r\n        if (LocaleManager.getCurrentLanguage() == null) { // по умолчанию показывать русский язык\r\n            comboLocales.getSelectionModel().select(0);\r\n        } else {\r\n            comboLocales.getSelectionModel().select(LocaleManager.getCurrentLanguage().getIndex());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        try {\r\n            this.resourceBundle = resources;\r\n            initialize();\r\n\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/seregsagapitov/controllers/Controller.java b/src/com/seregsagapitov/controllers/Controller.java
--- a/src/com/seregsagapitov/controllers/Controller.java	(revision bf49b85752b14a19718ed87c05e38463478bf2b2)
+++ b/src/com/seregsagapitov/controllers/Controller.java	(date 1628825619980)
@@ -381,16 +381,19 @@
     void addNote(ActionEvent event) {
         Parent root = null;
         try {
-            FXMLLoader loader = new FXMLLoader(getClass().getResource("../fxml/newNote.fxml"));
+
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("../fxml/newNote.fxml"), ResourceBundle.getBundle(Main.BUNDLES_FOLDER));
             root = loader.load();
             newNoteController = loader.getController();
             //newNoteController.textAreaFX = textAreaFX;
             Scene scene = new Scene(root);
             ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);
-            //textAreaFX.requestFocus();
+            // Main.getPrimaryStage().hide();
+
         } catch (IOException e) {
             e.printStackTrace();
         }
+        //Main.getPrimaryStage().getScene().getWindow().hide();
     }
 
     @FXML
@@ -449,7 +452,7 @@
 
 
     public void updateCountLabel() {
-        labelCount.setText(resourceBundle.getString("Count") +  ": " + collectionNote.getNoteList().size());
+        labelCount.setText(resourceBundle.getString("Count") + ": " + collectionNote.getNoteList().size());
     }
 
     ////////////////////////////////////////////////////////////////////////////////////
Index: src/com/seregsagapitov/controllers/NewNoteController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.seregsagapitov.controllers;\r\n\r\nimport com.seregsagapitov.interfaces.impls.CollectionNote;\r\nimport com.seregsagapitov.objects.Note;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class NewNoteController {\r\n\r\n    @FXML\r\n    private AnchorPane MainAnchorPain;\r\n\r\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"d MMM yyyy г HH:mm:ss\");\r\n    CollectionNote collectionNote = new CollectionNote();\r\n\r\n    @FXML\r\n    private TextArea textAreaFX;\r\n\r\n\r\n    void actionClose(ActionEvent event) {\r\n        Parent root = null;\r\n        try {\r\n            root = FXMLLoader.load(getClass().getResource(\"../fxml/main.fxml\"));\r\n            Scene scene = new Scene(root);\r\n            ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void cancelButton(ActionEvent event) throws IOException {\r\n        actionClose(event);\r\n    }\r\n\r\n    @FXML\r\n    void actionAdd(ActionEvent event) throws IOException {\r\n        collectionNote.addNote(new Note(textAreaFX.getText(), (simpleDateFormat.format(new Date())).toString(), 1));\r\n        textAreaFX.setText(\"\");\r\n        actionClose(event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/seregsagapitov/controllers/NewNoteController.java b/src/com/seregsagapitov/controllers/NewNoteController.java
--- a/src/com/seregsagapitov/controllers/NewNoteController.java	(revision bf49b85752b14a19718ed87c05e38463478bf2b2)
+++ b/src/com/seregsagapitov/controllers/NewNoteController.java	(date 1626243697817)
@@ -2,6 +2,8 @@
 
 import com.seregsagapitov.interfaces.impls.CollectionNote;
 import com.seregsagapitov.objects.Note;
+import com.seregsagapitov.start.Main;
+import com.seregsagapitov.utils.LocaleManager;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
@@ -11,9 +13,12 @@
 import javafx.scene.control.TextArea;
 import javafx.scene.layout.AnchorPane;
 import javafx.stage.Stage;
+
 import java.io.IOException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
+import java.util.ResourceBundle;
 
 public class NewNoteController {
 
@@ -29,13 +34,14 @@
 
     void actionClose(ActionEvent event) {
         Parent root = null;
+        //ResourceBundle resourceBundle = ResourceBundle.getBundle(Main.BUNDLES_FOLDER);
         try {
-            root = FXMLLoader.load(getClass().getResource("../fxml/main.fxml"));
-            Scene scene = new Scene(root);
-            ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);
+            root = FXMLLoader.load(getClass().getResource("../fxml/main.fxml"), ResourceBundle.getBundle(Main.BUNDLES_FOLDER));
         } catch (IOException e) {
             e.printStackTrace();
         }
+        Scene scene = new Scene(root);
+        ((Stage) MainAnchorPain.getScene().getWindow()).setScene(scene);
     }
 
     @FXML
